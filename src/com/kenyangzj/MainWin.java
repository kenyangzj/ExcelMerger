package com.kenyangzj;
import java.awt.EventQueue;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;


import java.awt.List;
import java.awt.SystemColor;
import java.awt.Label;
import java.awt.Font;
import java.awt.Button;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

import jxl.*;
import jxl.write.*;
import java.awt.Toolkit;
import java.awt.TextArea;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;


public class MainWin {

	private JFrame frmExcelMerge;
	private JFileChooser fileChooser;
	private List listFileList;
	private String[] chosenInputFilePaths = {};
	private String outputFilePath = "";
	private TextArea textAreaProcessLog;
	private final int MAX_ROWS = 65536;
	private Label lblValidationError;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainWin window = new MainWin();
					window.frmExcelMerge.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MainWin() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		// initialize the UI
		// most of the code below is generated by Eclipse WindowBuilder
		frmExcelMerge = new JFrame();
		frmExcelMerge.getContentPane().setBackground(SystemColor.activeCaptionBorder);
		frmExcelMerge.setResizable(false);
		frmExcelMerge.setTitle("Excel Merge");
		frmExcelMerge.setBounds(100, 100, 822, 702);
		frmExcelMerge.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmExcelMerge.getContentPane().setLayout(null);
		fileChooser = new JFileChooser();
		fileChooser.setFileFilter(new FileNameExtensionFilter("Excel 97-2003 Workbook", "xls"));
		
		listFileList = new List();
		listFileList.setMultipleMode(true);
		listFileList.setBounds(231, 38, 542, 230);
		frmExcelMerge.getContentPane().add(listFileList);
		
		Label lblFileList = new Label("Step 1: Pick input files to be merged.");
		lblFileList.setFont(new Font("Dialog", Font.BOLD, 12));
		lblFileList.setBounds(20, 13, 213, 24);
		frmExcelMerge.getContentPane().add(lblFileList);
		
		Button btnAddFiles = new Button("Add excel files ...");
		btnAddFiles.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				addFiles();
			}
		});
		btnAddFiles.setBounds(20, 43, 158, 24);
		frmExcelMerge.getContentPane().add(btnAddFiles);
		
		Button btnRemoveFiles = new Button("Remove selected files");
		btnRemoveFiles.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				removeFiles();
			}
		});
		btnRemoveFiles.setBounds(20, 85, 158, 24);
		frmExcelMerge.getContentPane().add(btnRemoveFiles);
		
		Label lblOutputPath = new Label("Step 2: Specify an output (merged) file.");
		lblOutputPath.setFont(new Font("Dialog", Font.BOLD, 12));
		lblOutputPath.setBounds(280, 309, 272, 24);
		frmExcelMerge.getContentPane().add(lblOutputPath);
		
		Button btnMerge = new Button("Save merged file ...");
		btnMerge.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				//mergeFiles();
				setOutputFile(); // and mergeFiles
			}
		});
		btnMerge.setBounds(325, 340, 130, 24);
		frmExcelMerge.getContentPane().add(btnMerge);
		
		Label label = new Label("List of chosen input files.");
		label.setAlignment(Label.RIGHT);
		label.setBounds(531, 8, 242, 24);
		frmExcelMerge.getContentPane().add(label);
		
		textAreaProcessLog = new TextArea();
		textAreaProcessLog.setEditable(false);
		textAreaProcessLog.setBounds(20, 405, 753, 225);
		frmExcelMerge.getContentPane().add(textAreaProcessLog);
		
		Label label_1 = new Label("Process log:");
		label_1.setBounds(20, 375, 70, 24);
		frmExcelMerge.getContentPane().add(label_1);
		
		Button btnRemoveAll = new Button("Remove all files");
		btnRemoveAll.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				listFileList.removeAll();
				// update our file list
				chosenInputFilePaths = listFileList.getItems();
			}
		});
		btnRemoveAll.setBounds(20, 134, 158, 24);
		frmExcelMerge.getContentPane().add(btnRemoveAll);
		
		lblValidationError = new Label("");
		lblValidationError.setFont(new Font("Dialog", Font.BOLD, 12));
		lblValidationError.setForeground(Color.RED);
		lblValidationError.setBounds(231, 13, 382, 24);
		frmExcelMerge.getContentPane().add(lblValidationError);
		

	}
	
	/**
	 * Open up a file dialog to select one or more excel files
	 */
	private void addFiles() {
		this.fileChooser.setMultiSelectionEnabled(true);
		File f = new File("");
		File[] files = {f};
		this.fileChooser.setSelectedFile(f);
		this.fileChooser.setSelectedFiles(files);
		// if user picked some files
		if (this.fileChooser.showOpenDialog(this.frmExcelMerge) == JFileChooser.APPROVE_OPTION) {
			File[] selectedFiles = this.fileChooser.getSelectedFiles();
			this.chosenInputFilePaths = this.listFileList.getItems();
			
			for (int i = 0; i < selectedFiles.length; i++) {
				String filePath = selectedFiles[i].getAbsolutePath();
				java.lang.Boolean doAddFile = true;
				
				// check if a file has already been selected
				for (int j = 0; j < chosenInputFilePaths.length; j++) {
					if (chosenInputFilePaths[j].equalsIgnoreCase(filePath)) {
						doAddFile = false;
						break;
					}
				}
				
				if (doAddFile) {
					this.listFileList.add(selectedFiles[i].getAbsolutePath());
				}
			}
			
			// update our file list
			this.chosenInputFilePaths = this.listFileList.getItems();
		}
	}
	
	/**
	 * Remove any selected files from the list
	 */
	private void removeFiles() {
		int[] fileIndexes = this.listFileList.getSelectedIndexes();
		for (int i = 0; i < fileIndexes.length; i ++){
			this.listFileList.remove(i);
		}
		
		// update our file list
		this.chosenInputFilePaths = this.listFileList.getItems();
	}
	
	/**
	 * Bring up the save file dialog to specify an output file
	 */
	private void setOutputFile() {
		this.fileChooser.setMultiSelectionEnabled(false);
		File f = new File("");
		File[] files = {f};
		this.fileChooser.setSelectedFile(f);
		this.fileChooser.setSelectedFiles(files);
		if (this.fileChooser.showSaveDialog(this.frmExcelMerge) == JFileChooser.APPROVE_OPTION) {
			this.outputFilePath = this.fileChooser.getSelectedFile().getAbsolutePath();
			if (!this.outputFilePath.substring(this.outputFilePath.length() - 5).equals(".xls")) {
				this.outputFilePath = this.outputFilePath + ".xls";
			}

			mergeFiles();
		}
	}
	
	private void mergeFiles() {
		boolean doProceed = true;
		this.lblValidationError.setText("");
		
		if (this.chosenInputFilePaths.length < 2) {
			this.lblValidationError.setText("You must select at least 2 input files.");
			doProceed = false;
		} else if (this.outputFilePath == "") {
			this.lblValidationError.setText("Please specify the output file");
			doProceed = false;
		}
		
		if (doProceed) {
			// do merging of files
			mergeExcel(this.chosenInputFilePaths, this.outputFilePath);
		}
	}
	
	private void mergeExcel(String[] inputPaths, String outputPath) {
		File inputFile, outputFile;
		
		try {
			
			outputFile = new File(outputPath);
			WritableWorkbook wbOut = Workbook.createWorkbook(outputFile);
			WritableSheet sheetOut = wbOut.createSheet("Sheet 1", 0);
			int startRow = 0;
			int numberOfFilesProcessing = 0;
			int numberOfFiles = inputPaths.length;
			String logText = "";
			int rowsProcessed = 0;
			outerloop:
			for (int i = 0; i < numberOfFiles; i++) {
				inputFile = new File(inputPaths[i]);
				
				Workbook wbIn = Workbook.getWorkbook(inputFile);
				Sheet sheetIn = wbIn.getSheet(0);
				
				numberOfFilesProcessing++;
				
				logText += "Processing ("+numberOfFilesProcessing+" of "+numberOfFiles+")\n";
				logText += "File: "+inputPaths[i]+"\n";
				this.textAreaProcessLog.append(logText);
				
				int numberOfCols = sheetIn.getColumns();
				int numberOfRows = sheetIn.getRows();
				
				for (int r=0; r<numberOfRows; r++) {
					for (int c=0; c<numberOfCols; c++) {
						// copy each sell from sheetIn to sheetOut
						sheetOut.addCell(new jxl.write.Label(c, startRow + r, sheetIn.getCell(c, r).getContents()));
					}
					rowsProcessed ++;
					if (rowsProcessed >= MAX_ROWS) {
						break outerloop;
					}
				}
				startRow += numberOfRows;
			}
			
			if (rowsProcessed >= MAX_ROWS) {
				this.textAreaProcessLog.append("Partially done.  Total number of rows exceed maximum allowed. Only "+rowsProcessed+" rows merged");
			} else {
				this.textAreaProcessLog.append("Done!  Total of "+rowsProcessed+" rows merged.");
			}
			wbOut.write();
			wbOut.close();
		} catch (Exception e) {
			String errLog = "Error: "+ e.toString()+"\n"+e.getMessage()+"\n";
			System.out.println(errLog);
			this.textAreaProcessLog.append(errLog);
		}
	}
}